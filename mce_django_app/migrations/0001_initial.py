# Generated by Django 3.0.5 on 2020-04-28 17:37

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields
import django_extensions.db.fields
import mce_django_app.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, overwrite=True, populate_from=['name'], unique=True)),
            ],
            options={
                'verbose_name': 'Entreprise',
                'verbose_name_plural': 'Entreprises',
            },
        ),
        migrations.CreateModel(
            name='ProjectGCP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('project_id', models.CharField(max_length=255, verbose_name='Project ID')),
                ('credentials', django_cryptography.fields.encrypt(mce_django_app.utils.JSONField(blank=True, default={}, null=True))),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username or Client ID')),
                ('password', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='Password or Secret Key'))),
                ('assume_role', models.CharField(blank=True, max_length=255, null=True, verbose_name='Assume Role')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(choices=[('aws', 'Aws'), ('azure', 'Azure'), ('gcp', 'Gcp'), ('vmware', 'Vmware'), ('croc', 'Croc'), ('aliyun', 'Aliyun'), ('oracle', 'Oracle'), ('openstack', 'Openstack'), ('gandi', 'Gandi'), ('ovh', 'Ovh'), ('cloudstack', 'Cloudstack'), ('digitalocean', 'Digitalocean')], max_length=255, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=300, overwrite=True, populate_from=['name'], unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('resource_id', models.CharField(max_length=1024, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=1024, overwrite=True, populate_from=['resource_id'], unique=True)),
                ('name', models.CharField(max_length=255)),
                ('metas', django_cryptography.fields.encrypt(mce_django_app.utils.JSONField(blank=True, default={}, null=True))),
                ('locked', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Company')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Provider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatusLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logger_name', models.CharField(max_length=100)),
                ('level', models.PositiveSmallIntegerField(choices=[(0, 'NotSet'), (20, 'Info'), (30, 'Warning'), (10, 'Debug'), (40, 'Error'), (50, 'Fatal')], db_index=True, default=40)),
                ('msg', models.TextField()),
                ('trace', models.TextField(blank=True, null=True)),
                ('create_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
            options={
                'verbose_name': 'Logging',
                'verbose_name_plural': 'Logging',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='DatacenterVMware',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mce_django_app.Resource')),
            ],
            options={
                'abstract': False,
            },
            bases=('mce_django_app.resource',),
        ),
        migrations.CreateModel(
            name='ResourceAWS',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mce_django_app.Resource')),
            ],
            options={
                'abstract': False,
            },
            bases=('mce_django_app.resource',),
        ),
        migrations.CreateModel(
            name='ResourceAzure',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mce_django_app.Resource')),
                ('kind', models.CharField(blank=True, max_length=255, null=True)),
                ('location', models.CharField(max_length=255)),
                ('sku', mce_django_app.utils.JSONField(blank=True, default={}, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('mce_django_app.resource',),
        ),
        migrations.CreateModel(
            name='ResourceGCP',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mce_django_app.Resource')),
            ],
            options={
                'abstract': False,
            },
            bases=('mce_django_app.resource',),
        ),
        migrations.CreateModel(
            name='ResourceVMware',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mce_django_app.Resource')),
            ],
            options={
                'abstract': False,
            },
            bases=('mce_django_app.resource',),
        ),
        migrations.CreateModel(
            name='Vcenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=1024, overwrite=True, populate_from=['name'], unique=True)),
                ('url', models.URLField(help_text='Full URL with options. Ex: https://host?username=user&password=pass', max_length=1024, unique=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('task_id', models.CharField(editable=False, max_length=255, unique=True)),
                ('state', models.CharField(choices=[('unknow', 'Unknow'), ('queued', 'Queued'), ('finished', 'Finished'), ('failed', 'Failed'), ('started', 'Started'), ('deferred', 'Deferred'), ('scheduled', 'Scheduled')], default='unknow', max_length=255, verbose_name='Task State')),
                ('message', models.TextField(null=True, verbose_name='Message')),
                ('traceback', models.TextField(null=True, verbose_name='Trace error')),
                ('output', mce_django_app.utils.JSONField(blank=True, default={}, null=True, verbose_name='Sortie')),
                ('exit_code', models.IntegerField(null=True, verbose_name='Exit code')),
                ('retry', models.IntegerField(default=0, verbose_name='Task Retries')),
                ('duration', models.IntegerField(default=0, verbose_name='Run duration')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('value', models.CharField(max_length=1024)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Company')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Provider')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionAzure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('subscription_id', models.CharField(max_length=1024, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username or Client ID')),
                ('password', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='Password or Secret Key'))),
                ('tenant', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('is_china', models.BooleanField(default=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mce_django_app_subscriptionazure_related', related_query_name='mce_django_app_subscriptionazures', to='mce_django_app.Company')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Provider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscriptionAWS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('subscription_id', models.CharField(max_length=1024, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('default_region', models.CharField(blank=True, max_length=255, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username or Client ID')),
                ('password', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='Password or Secret Key'))),
                ('assume_role', models.CharField(blank=True, max_length=255, null=True, verbose_name='Assume Role')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mce_django_app_subscriptionaws_related', related_query_name='mce_django_app_subscriptionawss', to='mce_django_app.Company')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Provider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=1024, overwrite=True, populate_from=['name'], unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('exclude_sync', models.BooleanField(default=False)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.Provider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceEventChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(editable=False, null=True)),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], max_length=10)),
                ('changes', mce_django_app.utils.JSONField(blank=True, default=[], null=True)),
                ('old_object', mce_django_app.utils.JSONField(blank=True, default={}, null=True)),
                ('new_object', mce_django_app.utils.JSONField(blank=True, default={}, null=True)),
                ('diff', models.TextField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='resource_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.ResourceType'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=models.ManyToManyField(to='mce_django_app.Tag'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(help_text="Remarque: Les comptes de service n'ont pas de mot de passe", max_length=128, null=True, verbose_name='Mot de passe')),
                ('is_service', models.BooleanField(default=False, verbose_name='Compte de service ?')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='mce_django_app.Company', verbose_name='Société')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(condition=models.Q(('company__isnull', False), ('provider__isnull', False)), fields=('company', 'provider', 'name', 'value'), name='provider_name_value_uniq'),
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(condition=models.Q(('company__isnull', True), ('provider__isnull', True)), fields=('name', 'value'), name='not_company_not_provider_uniq'),
        ),
        migrations.AddField(
            model_name='resourcevmware',
            name='datacenter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mce_django_app.DatacenterVMware'),
        ),
        migrations.AddField(
            model_name='resourcegcp',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.ProjectGCP'),
        ),
        migrations.AddField(
            model_name='resourceazure',
            name='resource_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.ResourceAzure'),
        ),
        migrations.AddField(
            model_name='resourceazure',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.SubscriptionAzure'),
        ),
        migrations.AddField(
            model_name='resourceaws',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mce_django_app.SubscriptionAWS'),
        ),
        migrations.AddField(
            model_name='datacentervmware',
            name='vcenter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mce_django_app.Vcenter'),
        ),
    ]
